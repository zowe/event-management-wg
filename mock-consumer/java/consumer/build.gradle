/*
  * This file was generated by the Gradle 'init' task.
  *
  * This generated file contains a sample Java application project to get you started.
  * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
  * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
  */


plugins {
  id 'com.github.johnrengelman.shadow' version '8.1.1'
  id 'java'
  id "com.diffplug.spotless" version "6.13.0"
}

repositories {
  // Use Maven Central for resolving dependencies.
  mavenCentral()
}

dependencies {
  // Use JUnit test framework.
  testImplementation 'junit:junit:4.13.2'

  // This dependency is used by the application.
  implementation 'com.google.guava:guava:31.1-jre'
  implementation 'org.apache.kafka:kafka-clients:3.5.0'
  implementation 'commons-cli:commons-cli:1.5.0'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(8)
  }
}

spotless {
// optional: limit format enforcement to just the files changed by this feature branch
ratchetFrom 'origin/main'

format 'misc', {
  // define the files to apply `misc` to
  target '*.gradle', '*.md', '.gitignore'

  // define the steps to apply to those files
  trimTrailingWhitespace()
  indentWithSpaces(2) // or spaces. Takes an integer argument if you don't like 4
  endWithNewline()
}
java {
  // don't need to set target, it is inferred from java

  // apply a specific flavor of google-java-format
  googleJavaFormat('1.7')
  // fix formatting of type annotations
  formatAnnotations()
  // make sure every file has the following copyright header.
  // optionally, Spotless can set copyright years by digging
  // through git history (see "license" section below)
  //  licenseHeader '/* (C)$YEAR */'
}

}

jar {
  manifest {
    attributes(
      'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '),
      'Main-Class': 'mock.java.consumer.App'
    )
  }

  // You can reference any part of the dependency configurations,
  // and you can have as many from statements as you need
  from configurations.runtimeClasspath
  // I just copied them into the top of the jar, so it looks like the eclipse exported
  // runnable jar, but you could designate a lib directory, and reference that in the
  // classpath as "lib/$it.name" instead of it.getName()
  into ''
}

shadowJar {
  manifest {
    inheritFrom(project.tasks.jar.manifest)
  }
}
